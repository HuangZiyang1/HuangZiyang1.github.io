<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>后台管理系统复盘</title>
      <link href="/posts/82d9de73.html"/>
      <url>/posts/82d9de73.html</url>
      
        <content type="html"><![CDATA[<h1 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h1><h2 id="技术复盘"><a href="#技术复盘" class="headerlink" title="技术复盘"></a>技术复盘</h2><h3 id="毁灭性bug"><a href="#毁灭性bug" class="headerlink" title="毁灭性bug"></a>毁灭性bug</h3><ol><li>随便下载库</li></ol><h4 id="随便下载库"><a href="#随便下载库" class="headerlink" title="随便下载库"></a>随便下载库</h4><blockquote><p><a href="https://github.com/WAGFS/vue-zxing">https://github.com/WAGFS/vue-zxing</a></p></blockquote><p>下载了没有人用的库，因为代码互相依赖，依赖版本不统一，导致了项目打开后显现不出来任何内容。接着我使用npm fix audit语句尝试修复，结果仍无法显现任何内容，之后一时心急使用npm fix audit —force修复，导致项目直接崩溃，无法启动。</p><h3 id="功能介绍和业务细节"><a href="#功能介绍和业务细节" class="headerlink" title="功能介绍和业务细节"></a>功能介绍和业务细节</h3><ol><li>模板的选择</li><li>模板的初始化</li><li>模板的项目结构分析</li><li>登录（注册）</li><li>面包屑导航</li><li>图表的使用</li><li>element自定义样式修改</li><li>样式scope问题</li><li>上传</li><li>下载（导出）</li><li>增删查改</li><li>多权限路由</li><li>分页逻辑</li></ol><blockquote><p><a href="https://panjiachen.github.io/vue-element-admin-site/zh/guide/">模板文档</a></p><p><a href="https://panjiachen.github.io/vue-element-admin/#/dashboard">模板预览</a></p><p><a href="https://zhuanlan.zhihu.com/p/512367316">推荐12 个超棒的开源后台管理系统（强烈推荐收藏）</a></p></blockquote><h4 id="模板的选择"><a href="#模板的选择" class="headerlink" title="模板的选择"></a>模板的选择</h4><p>后台管理系统很多，这里选择了基于vue2的vue-element-admin</p><h4 id="模板的初始化"><a href="#模板的初始化" class="headerlink" title="模板的初始化"></a>模板的初始化</h4><p>模板文档中：</p><blockquote><p>建议</p><p>你可以把 <code>vue-element-admin</code>当做工具箱或者集成方案仓库，在 <code>vue-admin-template</code> 的基础上进行二次开发，想要什么功能或者组件就去 <code>vue-element-admin</code> 那里复制过来。</p></blockquote><p>但我个人开发的感受是还是直接使用vue-element-admin更加方便，删比增简单。有时因为要引用一个功能，需要整个项目找他的入口和引用。</p><p>两个例子：</p><ol><li><p>在组件error-log中，引用的资源有：</p><p><img src="https://cdn.jsdelivr.net/gh/HuangZiyang1/img/Typora-img/202403141426340.png" alt="image-20240303142837011" style="zoom:50%;" /></p><p>处理起来比较困难，大致的逻辑是在设置settings.js中确定errorlog的使用环境，在error-log.js中判断是否需要使用……</p></li><li><p>多权限路由中，也有很多关于roles判断的地方</p></li></ol><p>模板初始化成功后，可以运行项目和code业务代码</p><h4 id="模板的项目结构分析"><a href="#模板的项目结构分析" class="headerlink" title="模板的项目结构分析"></a>模板的项目结构分析</h4><blockquote><p><a href="https://blog.csdn.net/cxyuanaa/article/details/109028129">Vue-element-admin之目录结构及相关链接</a></p></blockquote><h4 id="登录（注册）"><a href="#登录（注册）" class="headerlink" title="登录（注册）"></a>登录（注册）</h4><p>在上两个项目中，登录是比较困扰我的业务逻辑，主要改动的地方有：</p><p>api/login.js 中重写登录接口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// url: &#x27;/vue-admin-template/user/info&#x27;,</span></span><br><span class="line">   <span class="attr">url</span>: <span class="string">&#x27;/user/info&#x27;</span>,</span><br><span class="line">   <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">   <span class="attr">params</span>: &#123; token &#125;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>src/main.js 中取消mock服务</p><p>src/utils/request.js 中重写登录逻辑和token名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config.headers[&#x27;X-Token&#x27;] = getToken()</span></span><br><span class="line">   config.<span class="property">headers</span>[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="title function_">getToken</span>()</span><br><span class="line">   </span><br><span class="line"><span class="comment">// if (res.code !== 20000) &#123;</span></span><br><span class="line">   <span class="keyword">if</span> (res.<span class="property">code</span> !== <span class="number">200</span>) &#123;</span><br></pre></td></tr></table></figure><p>vue.config.js 中取消mock服务，新增跨域设置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="attr">proxy</span>: &#123; <span class="comment">// 配置反向代理</span></span><br><span class="line">      [process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API</span>]: &#123; <span class="comment">// &quot;/api&quot;自定义的请求路径地址</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;your-service.com:port&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">// 是否进行跨域 ture是  false不是</span></span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123; <span class="comment">// 路径重写</span></span><br><span class="line">          [<span class="string">&#x27;^&#x27;</span> + process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API</span>]: <span class="string">&#x27;/&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="comment">// before: require(&#x27;./mock/mock-server.js&#x27;)</span></span><br></pre></td></tr></table></figure><p>.env.development，.env.production 中配置域名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># VUE_APP_BASE_API = &#x27;/dev-api&#x27;</span></span><br><span class="line">VUE_APP_BASE_API = <span class="string">&#x27;your-service.com:port&#x27;</span></span><br></pre></td></tr></table></figure><p>src/utils/auth.js 中重写tokenkey</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const TokenKey = &#x27;vue_admin_template_token&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">TokenKey</span> = <span class="string">&#x27;Authorization&#x27;</span></span><br></pre></td></tr></table></figure><p>还有自己处理一下response的data，<strong>有的请求不用解构</strong></p><h4 id="面包屑导航"><a href="#面包屑导航" class="headerlink" title="面包屑导航"></a>面包屑导航</h4><p><img src="https://cdn.jsdelivr.net/gh/HuangZiyang1/img/Typora-img/202403141427553.png" alt="image-20240303145647192"></p><p><img src="https://cdn.jsdelivr.net/gh/HuangZiyang1/img/Typora-img/202403141427745.png" alt="image-20240303150038689"></p><p>我记得出现过一个bug，全部的dashboard字样重新设置会显示第一张图，具体的问题我还没有搞明白。</p><h4 id="图表的使用"><a href="#图表的使用" class="headerlink" title="图表的使用"></a>图表的使用</h4><p>用echart和模板自带的图表组件就好了</p><h4 id="element自定义样式修改"><a href="#element自定义样式修改" class="headerlink" title="element自定义样式修改"></a>element自定义样式修改</h4><p>src\styles\element-ui.scss 下重新设置，样式的类名去查html元素</p><h4 id="样式scope问题"><a href="#样式scope问题" class="headerlink" title="样式scope问题"></a>样式scope问题</h4><p><img src="https://cdn.jsdelivr.net/gh/HuangZiyang1/img/Typora-img/202403141427140.png" alt="image-20240303150633155"></p><p>在表格中，如果需要根据某一条的状态设置特殊样式，此时在element-ui.scss全局设置样式是不可行的，因此需要单独设置特殊样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断状态的逻辑写到这里面,这个是上色</span></span><br><span class="line">    <span class="title function_">statusClassName</span>(<span class="params">&#123; row, column, rowIndex, columnIndex &#125;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (row.<span class="property">deleted</span> === <span class="number">1</span> &amp;&amp; column.<span class="property">label</span> === <span class="string">&#x27;笔记状态&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;deleted&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (row.<span class="property">shielded</span> === <span class="number">1</span> &amp;&amp; column.<span class="property">label</span> === <span class="string">&#x27;笔记状态&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;shielded&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (row.<span class="property">star</span> === <span class="number">1</span> &amp;&amp; column.<span class="property">label</span> === <span class="string">&#x27;笔记状态&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;star&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;normal&#x27;</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>然后需要style设置非scoped，才能穿透样式，为了防止样式穿透影响其他元素，应当设置一个特殊的container装载这些样式</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line"><span class="selector-class">.very-special-container</span> &#123;</span><br><span class="line">  <span class="selector-class">.deleted</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#e2a0a9</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.shielded</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#bbb4b4</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.star</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">242</span>, <span class="number">213</span>) <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h4><p>一般都用自定义上传，el-upload配置</p><p>两个项目中涉及了：</p><ol><li>自定义上传规则</li><li>最多允许一张图片的上传</li><li>必须有一张图片的上传</li><li>至少上传一张，最多允许九张图片的上传</li></ol><h5 id="自定义上传规则"><a href="#自定义上传规则" class="headerlink" title="自定义上传规则"></a>自定义上传规则</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-upload </span><br><span class="line">class=&quot;upload-demo&quot;</span><br><span class="line">ref=&quot;upload&quot;</span><br><span class="line">action=&quot;#&quot;</span><br><span class="line">drag</span><br><span class="line">accept=&quot;.jpg,.jpeg,.png,.bmp&quot;</span><br><span class="line">:auto-upload=&quot;false&quot;</span><br><span class="line">:limit=&quot;1&quot;</span><br><span class="line">:on-change=&quot;changeFileLength&quot;</span><br><span class="line">:http-request=&quot;uploadRequest&quot; </span><br><span class="line">list-type=&quot;picture&quot;&gt;</span><br><span class="line">&lt;div slot=&quot;tip&quot; class=&quot;el-upload__tip&quot;&gt;图片推荐尺寸长宽比为3：1&lt;/div&gt;</span><br><span class="line">&lt;/el-upload&gt;</span><br></pre></td></tr></table></figure><p>然后在下面js中写上传逻辑，需要注意的点其实是怎么验证（图片一定要上传时）</p><h5 id="最多允许一张图片的上传"><a href="#最多允许一张图片的上传" class="headerlink" title="最多允许一张图片的上传"></a>最多允许一张图片的上传</h5><p>设置limit属性</p><h5 id="必须有一张图片的上传"><a href="#必须有一张图片的上传" class="headerlink" title="必须有一张图片的上传"></a>必须有一张图片的上传</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">dynamicValidateForm</span>.<span class="property">urlList</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">filesLength</span> === <span class="number">0</span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">     <span class="attr">message</span>: <span class="string">&#x27;没有上传图片&#x27;</span>,</span><br><span class="line">     <span class="attr">type</span>: <span class="string">&#x27;info&#x27;</span></span><br><span class="line">     &#125;)</span><br><span class="line">     <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="至少有一张图片，最多有九张图片的上传"><a href="#至少有一张图片，最多有九张图片的上传" class="headerlink" title="至少有一张图片，最多有九张图片的上传"></a>至少有一张图片，最多有九张图片的上传</h5><p>前二者的结合</p><h4 id="下载（导出）"><a href="#下载（导出）" class="headerlink" title="下载（导出）"></a>下载（导出）</h4><p>根据vue-element-admin改写，添加一下特殊的配置项即可</p><p>性能考虑，需要分包引入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">handleDownload</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">downloadLoading</span> = <span class="literal">true</span></span><br><span class="line">    <span class="comment">// 分包引入</span></span><br><span class="line">    <span class="keyword">import</span>(<span class="string">&#x27;@/vendor/Export2Excel&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">excel</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// const data = filterVal</span></span><br><span class="line">        <span class="comment">// your downloading method</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">downloadLoading</span> = <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>处理配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// multiHeader：一级表头</span></span><br><span class="line"><span class="comment">// tHeader：二级表头</span></span><br><span class="line"><span class="comment">// filterVal：匹配的字段，与tHeader一一对应</span></span><br><span class="line"><span class="comment">// list：获得原始数据</span></span><br><span class="line"><span class="comment">// data = formaJson：处理原始数据</span></span><br><span class="line"><span class="comment">// merges：一级表头和二级表头的合并</span></span><br><span class="line"><span class="keyword">const</span> multiHeader = [[<span class="string">&#x27;笔记ID&#x27;</span>, <span class="string">&#x27;笔记信息&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;笔记内容&#x27;</span>, <span class="string">&#x27;笔记热度&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;笔记数据&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;运营信息&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;笔记状态&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>]]</span><br><span class="line"><span class="keyword">const</span> tHeader = [<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;笔记标题&#x27;</span>, <span class="string">&#x27;笔记图片/视频地址&#x27;</span>, <span class="string">&#x27;笔记链接&#x27;</span>, <span class="string">&#x27;标签&#x27;</span>, <span class="string">&#x27;作者小红书昵称&#x27;</span>, <span class="string">&#x27;笔记发布时间&#x27;</span>, <span class="string">&#x27;IP&#x27;</span>, <span class="string">&#x27;作者小红书号&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;级别&#x27;</span>, <span class="string">&#x27;火爆程度&#x27;</span>, <span class="string">&#x27;点赞数&#x27;</span>, <span class="string">&#x27;评论数&#x27;</span>, <span class="string">&#x27;收藏数&#x27;</span>, <span class="string">&#x27;分享数&#x27;</span>, <span class="string">&#x27;组名&#x27;</span>, <span class="string">&#x27;微信群名&#x27;</span>, <span class="string">&#x27;作者微信昵称&#x27;</span>, <span class="string">&#x27;作者真实姓名&#x27;</span>, <span class="string">&#x27;是否屏蔽&#x27;</span>, <span class="string">&#x27;是否删除&#x27;</span>, <span class="string">&#x27;是否收藏&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> filterVal = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;picture&#x27;</span>, <span class="string">&#x27;url&#x27;</span>, <span class="string">&#x27;tags&#x27;</span>, <span class="string">&#x27;bookletUserName&#x27;</span>, <span class="string">&#x27;publishTime&#x27;</span>, <span class="string">&#x27;ip&#x27;</span>, <span class="string">&#x27;redBookletNumber&#x27;</span>, <span class="string">&#x27;description&#x27;</span>, <span class="string">&#x27;degree&#x27;</span>, <span class="string">&#x27;hotDegree&#x27;</span>, <span class="string">&#x27;likes&#x27;</span>, <span class="string">&#x27;comments&#x27;</span>, <span class="string">&#x27;bookmarks&#x27;</span>, <span class="string">&#x27;shares&#x27;</span>, <span class="string">&#x27;groupName&#x27;</span>, <span class="string">&#x27;wxGroupName&#x27;</span>, <span class="string">&#x27;wxName&#x27;</span>, <span class="string">&#x27;authorName&#x27;</span>, <span class="string">&#x27;shielded&#x27;</span>, <span class="string">&#x27;deleted&#x27;</span>, <span class="string">&#x27;star&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> list = <span class="variable language_">this</span>.<span class="property">list</span></span><br><span class="line"><span class="keyword">const</span> data = <span class="variable language_">this</span>.<span class="title function_">formatJson</span>(filterVal, list)</span><br><span class="line"><span class="keyword">const</span> merges = [<span class="string">&#x27;A1:A2&#x27;</span>, <span class="string">&#x27;B1:I1&#x27;</span>, <span class="string">&#x27;J1:J2&#x27;</span>, <span class="string">&#x27;K1:L1&#x27;</span>, <span class="string">&#x27;M1:P1&#x27;</span>, <span class="string">&#x27;Q1:T1&#x27;</span>, <span class="string">&#x27;U1:W1&#x27;</span>]</span><br></pre></td></tr></table></figure><p>调用函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">&#x27;@/vendor/Export2Excel&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">excel</span> =&gt;</span> &#123;</span><br><span class="line">excel.<span class="title function_">export_json_to_excel</span>(&#123;</span><br><span class="line">          multiHeader,</span><br><span class="line">          <span class="attr">header</span>: tHeader,</span><br><span class="line">          merges,</span><br><span class="line">          data,</span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&#x27;笔记查询结果&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="增删查改"><a href="#增删查改" class="headerlink" title="增删查改"></a>增删查改</h4><p>略</p><h4 id="多权限路由"><a href="#多权限路由" class="headerlink" title="多权限路由"></a>多权限路由</h4><p>见chuang-system的写法</p><h4 id="分页逻辑"><a href="#分页逻辑" class="headerlink" title="分页逻辑"></a>分页逻辑</h4><p>当时写分页的时候比较乱，现在可以总结一下分页。</p><blockquote><p> <a href="https://blog.csdn.net/weixin_41860630/article/details/126471343?spm=1001.2014.3001.5502">Elasticsearch分页的三种方式:from+size、scroll、search_after</a></p></blockquote><ol><li>前端分页</li><li>服务器分页<ol><li>form + size</li><li>scroll</li></ol></li></ol><h5 id="前端分页"><a href="#前端分页" class="headerlink" title="前端分页"></a>前端分页</h5><p>后台返回所有数据，前端进行分页，维护list和show_list</p><h5 id="服务器分页——form-size"><a href="#服务器分页——form-size" class="headerlink" title="服务器分页——form + size"></a>服务器分页——form + size</h5><p>前端搜索体验最好，但只能用于后台小数据集</p><p>前端维护total，currentPage，pageSize、后台返回的list即可</p><h5 id="服务器分页——scroll"><a href="#服务器分页——scroll" class="headerlink" title="服务器分页——scroll"></a>服务器分页——scroll</h5><p>维护scollIdArray，page，total即可，total由后台返回。</p><p>page的变化由prevClick和nextClick决定</p><p>scollIdArray，更新于后台返回数据，点击prevClick和nextClick，搜索条件发生变化时</p><p>在后台返回数据时：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">scollIdArray</span>[<span class="variable language_">this</span>.<span class="property">page</span> - <span class="number">1</span>] = response.<span class="property">data</span>.<span class="property">scrollId</span></span><br></pre></td></tr></table></figure><p>点击prevClick和nextClick时：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (event === <span class="string">&#x27;prev&#x27;</span>) &#123;</span><br><span class="line">  data.<span class="property">afterId</span> = <span class="variable language_">this</span>.<span class="property">scollIdArray</span>[<span class="variable language_">this</span>.<span class="property">page</span> - <span class="number">3</span>]</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">page</span>--</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (event === <span class="string">&#x27;next&#x27;</span>) &#123;</span><br><span class="line">  data.<span class="property">afterId</span> = <span class="variable language_">this</span>.<span class="property">scollIdArray</span>[<span class="variable language_">this</span>.<span class="property">page</span> - <span class="number">1</span>]</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">page</span>++</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>搜索条件发生变化时，清空</p><h3 id="一些bug的处理思路"><a href="#一些bug的处理思路" class="headerlink" title="一些bug的处理思路"></a>一些bug的处理思路</h3><p>首先一点，前端没多少很难的东西。很多问题是后台给你制造的，揪出对接后台问题。</p><ol><li>空数据（数据为null）问题</li><li>element组件dialogdata读取问题</li><li>element-dialog和echart不太兼容的问题</li></ol><h5 id="空数据（数据为null）问题"><a href="#空数据（数据为null）问题" class="headerlink" title="空数据（数据为null）问题"></a>空数据（数据为null）问题</h5><p>后台传来null时（往往是爬虫没有给后台数据，后台只建了表但是没有数据），很多代码会跑出异常，需要增强健壮性。</p><p>在使用后台数据进行操作之前，需要判断后台数据是否为null，然后进行处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;list&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">deep</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="title function_">handler</span>(<span class="params">newList</span>) &#123;</span><br><span class="line">        <span class="comment">// 遍历数组中的对象</span></span><br><span class="line">        newList.<span class="title function_">forEach</span>(<span class="function">(<span class="params">obj, index</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (key === <span class="string">&#x27;tags&#x27;</span> &amp;&amp; obj[key] === <span class="literal">null</span>) &#123;</span><br><span class="line">              obj[key] = [<span class="string">&#x27;未知&#x27;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (key === <span class="string">&#x27;degree&#x27;</span> &amp;&amp; obj[key] === <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">              obj[key] = <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (key === <span class="string">&#x27;publishTime&#x27;</span> &amp;&amp; obj[key] === <span class="literal">null</span>) &#123;</span><br><span class="line">              obj[key] = <span class="string">&#x27;XXXX-XX-XX XX:XX:XX&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (obj[key] === <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">              obj[key] = <span class="string">&#x27;未知&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h5 id="element组件dialogdata读取问题"><a href="#element组件dialogdata读取问题" class="headerlink" title="element组件dialogdata读取问题"></a>element组件dialogdata读取问题</h5><p>业务上，有一个dialog需要点开之后再请求后台然后渲染数据，但是element-dialog是当即渲染而不是点开之后再去获得，因此需要默认的设置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">list</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">list</span>.<span class="property">length</span> &gt; <span class="number">0</span> ? <span class="variable language_">this</span>.<span class="property">list</span>[<span class="variable language_">this</span>.<span class="property">showIndex</span>] : &#123;&#125;</span><br></pre></td></tr></table></figure><h5 id="element-dialog和echart不太兼容的问题"><a href="#element-dialog和echart不太兼容的问题" class="headerlink" title="element-dialog和echart不太兼容的问题"></a>element-dialog和echart不太兼容的问题</h5><p>echart中很喜欢使用width:100%，但是dialog默认的width是自动计算的，因此会导致dialog非常小，echart不能正常显示的问题。</p><p>需要将dialog设置宽度，如果仍不行需要重新启动服务，因为有时候echart在我的代码里是只初始化一次，且dialog在页面加载的时候就会自动加载。</p><p>如果图表仍不正常显示，考虑是前者数据读取的问题</p><h5 id="登录问题"><a href="#登录问题" class="headerlink" title="登录问题"></a>登录问题</h5><p>当时卡了我很久，登录的思路是：取消mock服务，业务逻辑：配置域名，配置代理，调用自己的接口，返回数据处理。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p><a href="https://blog.csdn.net/cxyuanaa/article/details/109028129">Vue-element-admin之目录结构及相关链接</a></p><p><a href="https://github.com/WAGFS/vue-zxing">https://github.com/WAGFS/vue-zxing</a></p><p><a href="https://panjiachen.github.io/vue-element-admin-site/zh/guide/">模板文档</a></p><p><a href="https://panjiachen.github.io/vue-element-admin/#/dashboard">模板预览</a></p><p><a href="https://zhuanlan.zhihu.com/p/512367316">推荐12 个超棒的开源后台管理系统（强烈推荐收藏）</a></p><p><a href="https://blog.csdn.net/weixin_41860630/article/details/126471343?spm=1001.2014.3001.5502">Elasticsearch分页的三种方式:from+size、scroll、search_after</a></p><p><a href="https://juejin.cn/post/6844903476661583880">手摸手，带你用vue撸后台 系列一（基础篇）</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;  }    div#menus {    font-family: "ZhuZiAYuanJWD";  }  h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;  }  a.article-title,  a.blog-slider__title,  a.categoryBar-list-link,  h1.post-title {    font-family: ZhuZiAYuanJWD;  }    .iconfont {    font-family: "iconfont" !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;  }    /* 时间轴生肖icon */  svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;  }    .icon-zhongbiao::before {    color: #f7c768;  }    /* bilibli番剧插件 */  #article-container .bangumi-tab.bangumi-active {    background: var(--anzhiyu-theme);    color: var(--anzhiyu-ahoverbg);    border-radius: 10px;  }  a.bangumi-tab:hover {    text-decoration: none !important;  }  .bangumi-button:hover {    background: var(--anzhiyu-theme) !important;    border-radius: 10px !important;    color: var(--anzhiyu-ahoverbg) !important;  }  a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;  }  .bangumi-button {    padding: 5px 10px !important;  }    a.bangumi-tab {    padding: 5px 10px !important;  }  svg.icon.faa-tada {    font-size: 1.1em;  }  .bangumi-info-item {    border-right: 1px solid #f2b94b;  }  .bangumi-info-item span {    color: #f2b94b;  }  .bangumi-info-item em {    color: #f2b94b;  }    /* 解决artitalk的图标问题 */  #uploadSource > svg {    width: 1.19em;    height: 1.5em;  }    /*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */  #page-header:not(.not-top-img):before {    background-color: transparent !important;  }    /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: rgba(255, 255, 255, 0.9);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);  }    /* 文章页面正文背景 */  div#post {    background: rgba(255, 255, 255, 0.9);  }    /* 分页页面 */  div#page {    background: rgba(255, 255, 255, 0.9);  }    /* 归档页面 */  div#archive {    background: rgba(255, 255, 255, 0.9);  }    /* 标签页面 */  div#tag {    background: rgba(255, 255, 255, 0.9);  }    /* 分类页面 */  div#category {    background: rgba(255, 255, 255, 0.9);  }    /*夜间模式伪类遮罩层透明*/  [data-theme="dark"] #recent-posts > .recent-post-item {    background: #121212;  }    [data-theme="dark"] .card-widget {    background: #121212 !important;  }    [data-theme="dark"] div#post {    background: #121212 !important;  }    [data-theme="dark"] div#tag {    background: #121212 !important;  }    [data-theme="dark"] div#archive {    background: #121212 !important;  }    [data-theme="dark"] div#page {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: transparent !important;  }  /* 页脚透明 */  #footer {    background: transparent !important;  }    /* 头图透明 */  #page-header {    background: transparent !important;  }    #rightside > div > button {    border-radius: 5px;  }    /* 滚动条 */    ::-webkit-scrollbar {    width: 10px;    height: 10px;  }    ::-webkit-scrollbar-thumb {    background-color: #3b70fc;    border-radius: 2em;  }    ::-webkit-scrollbar-corner {    background-color: transparent;  }    ::-moz-selection {    color: #fff;    background-color: #3b70fc;  }    /* 音乐播放器 */    /* .aplayer .aplayer-lrc {    display: none !important;  } */    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */  }    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */  }    .aplayer.aplayer-fixed {    z-index: 999999 !important;  }    /* 评论框  */  .vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;  }    /* 设置评论框 */    .vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;  }    /* md网站下划线 */  #article-container a:hover {    text-decoration: none !important;  }    #article-container #hpp_talk p img {    display: inline;  }    /* 404页面 */  #error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);  }    #error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;  }    #error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #3b70fc;    background-position: center;    background-size: cover;  }    #error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;  }  #error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;  }  #error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;  }  #error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);  }    #body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;  }    #body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;  }    #body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;  }    #body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;  }    #body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--anzhiyu-card-bg);    display: flex;  }    #body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;  }    #body-wrap.error .aside-list .aside-list-item .content time {    display: none;  }    /* 代码框主题 */  #article-container figure.highlight {    border-radius: 10px;  }]]></content>
      
    </entry>
    
    
  
</search>
